{"version":3,"sources":["components/weather.jsx","components/input.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","flag","country","toLowerCase","className","city","src","main_temp","weatherIcon","feels_like","min","max","description","Input","onSubmit","loadWeather","name","id","placeholder","api","WeatherApp","state","getWeather","event","a","preventDefault","cityAnCountry","target","searchBar","value","document","querySelector","style","display","fetch","callAPI","json","response","callAPI2","response2","console","log","cod","setState","sys","calculateCulsius","main","temp","weather","temp_max","temp_min","getWeatherIcon","alert","Math","floor","icons","rangeId","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.deb9f5db.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport 'weather-icons/css/weather-icons.css';\r\n// import Input from './input.jsx';\r\n\r\n\r\nfunction Weather(props) {\r\n    //console.log('>>>', props);\r\n    let flag = null;\r\n    if (props.country) {\r\n        flag = props.country.toLowerCase();   \r\n    }\r\n    return (\r\n          <div className=\"mainInfo\">\r\n            <h2>{props.city}, {props.country}</h2>\r\n            <img src={`./flags/${flag}.png`} />\r\n            <div className=\"temp\">\r\n                    <div>\r\n                        <h1>{props.main_temp}&deg;</h1>\r\n                    </div>\r\n                    <div>\r\n                        <i className={`wi ${props.weatherIcon}`}></i>\r\n                    </div>\r\n            </div>\r\n            <div className=\"additional\">\r\n                <h3 className=\"feels_like\">Ощущается {props.feels_like}&deg;</h3>\r\n                <h3 className=\"maxMin\">Мин {props.min}&deg; Макс {props.max}&deg;</h3>\r\n                <h3 className=\"description\">{props.description}</h3>\r\n            </div>\r\n          </div>\r\n    );\r\n}\r\n\r\nexport default Weather;\r\n","import React, { useState } from 'react';\r\nimport 'weather-icons/css/weather-icons.css';\r\n\r\nfunction Input(props) {\r\n    \r\n    return (\r\n        <div className=\"searchBox\">\r\n            <form onSubmit={props.loadWeather}>\r\n                <input name=\"searchBar\"\r\n                className=\"searchBar\"\r\n                id=\"searchBar\"\r\n                placeholder=\"Введите ваш город\"></input>\r\n                <button>Подтвердить</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n    \r\nexport default Input;","import React, {Component} from 'react';\nimport Weather from \"./components/weather.jsx\";\nimport Input from './components/input.jsx';\n\nconst api = {\n  key: \"d60e9c0fd732e63411be26d3282fe316\"\n}\n\nclass WeatherApp extends Component {\n  state = {\n    city: null,\n    country: null,\n    main_temp: null,\n    feels_like: null,\n    description: null,\n    weatherIcon: null,\n    max: null,\n    min: null\n  }\n  constructor(){\n    super();\n    //this.getWeather();\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-day-rain\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\",\n    }\n  }\n\n  getWeather = async (event) => {\n    event.preventDefault();\n    // console.log(event.target.searchBar.value);\n    let cityAnCountry = event.target.searchBar.value;\n    document.querySelector('.mainInfo').style.display = \"block\";\n\n    if (cityAnCountry) {\n      const callAPI = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityAnCountry}&appid=${api.key}&lang=ru`);\n      const response = await callAPI.json();\n\n      const callAPI2 = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityAnCountry}&appid=${api.key}&lang=ru`);\n      const response2 = await callAPI2.json();\n\n      console.log(response2);\n\n      if (response.cod === 200) {\n        console.log(response);\n        this.setState({\n          city: response.name,\n          country: response.sys.country,\n          main_temp: this.calculateCulsius(response.main.temp),\n          feels_like: this.calculateCulsius(response.main.feels_like),\n          description: response.weather[0].description,\n          max: this.calculateCulsius(response.main.temp_max),\n          min: this.calculateCulsius(response.main.temp_min)\n        });\n  \n        this.getWeatherIcon(this.weatherIcon, response.weather[0].id);\n      } else {\n        alert('error, неверный запрос');\n      }\n    } else{\n      alert('error, введите город');\n    }\n\n  }\n\n  calculateCulsius = (temp) => {\n    let result = Math.floor(temp - 273.15);\n    return result;\n  }\n\n  getWeatherIcon = (icons, rangeId) => {\n    switch (true) {\n      case rangeId>=200 && rangeId<=232:\n        this.setState({weatherIcon:this.weatherIcon.Thunderstorm})\n        break;\n      case rangeId>=300 && rangeId<=321:\n        this.setState({weatherIcon:this.weatherIcon.Drizzle})\n        break;\n      case rangeId>=500 && rangeId<=531:\n        this.setState({weatherIcon:this.weatherIcon.Rain})\n        break;\n      case rangeId>=600 && rangeId<=622:\n        this.setState({weatherIcon:this.weatherIcon.Snow})\n        break;\n      case rangeId>=701 && rangeId<=781:\n        this.setState({weatherIcon:this.weatherIcon.Atmosphere})\n        break;\n      case rangeId === 800:\n        this.setState({weatherIcon:this.weatherIcon.Clear})\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n          this.setState({weatherIcon:this.weatherIcon.Clouds})\n          break;\n\n      default:\n        // this.setState({icon:this.weatherIcon.Clear})\n        break;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Input\n        loadWeather={this.getWeather}/>\n\n        <Weather\n        city={this.state.city}\n        country={this.state.country}\n        main_temp={this.state.main_temp}\n        feels_like={this.state.feels_like}\n        description={this.state.description}\n        weatherIcon={this.state.weatherIcon}\n        max={this.state.max}\n        min={this.state.min}\n        />\n      </div>\n    );\n  }\n}\n \nexport default WeatherApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}